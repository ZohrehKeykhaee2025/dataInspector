}
}
#' Predict method for knn_result
#'
#' @param object knn_result object
#' @param newdata New data to predict
#' @param ... Additional arguments
#' @export
predict.knn_result <- function(object, newdata, ...) {
# For simplicity, we'll just return the stored predictions
# In a real implementation, you'd need to store training data
warning("This predict method is simplified. For full functionality, use knn_s3() directly.")
return(object$predictions)
}
#' Generate comprehensive data report
#'
#' @param data A data frame
#' @return A list with comprehensive data summary
#' @export
#' @examples
#' report_data(iris)
report_data <- function(data) {
if (!is.data.frame(data)) {
stop("Input must be a data frame")
}
# Basic overview
overview <- list(
n_rows = nrow(data),
n_cols = ncol(data),
memory_size = format(utils::object.size(data), units = "auto")
)
# Missing values analysis
missing_summary <- sapply(data, function(x) {
sum(is.na(x))
})
missing_percentage <- sapply(data, function(x) {
round(sum(is.na(x)) / length(x) * 100, 2)
})
# Column types
col_types <- sapply(data, class)
# Numeric columns analysis
numeric_stats <- list()
numeric_cols <- sapply(data, is.numeric)
if (any(numeric_cols)) {
numeric_data <- data[, numeric_cols, drop = FALSE]
numeric_stats <- lapply(numeric_data, function(x) {
list(
mean = mean(x, na.rm = TRUE),
median = median(x, na.rm = TRUE),
sd = sd(x, na.rm = TRUE),
q1 = quantile(x, 0.25, na.rm = TRUE),
q3 = quantile(x, 0.75, na.rm = TRUE),
skewness = moments::skewness(x, na.rm = TRUE),
kurtosis = moments::kurtosis(x, na.rm = TRUE)
)
})
}
# Factor columns analysis
factor_stats <- list()
factor_cols <- sapply(data, is.factor)
if (any(factor_cols)) {
factor_data <- data[, factor_cols, drop = FALSE]
factor_stats <- lapply(factor_data, function(x) {
list(
levels = levels(x),
n_levels = length(levels(x)),
counts = table(x)
)
})
}
# Prepare final result
result <- list(
overview = overview,
missing_values = data.frame(
column = names(data),
missing_count = missing_summary,
missing_percentage = missing_percentage,
row.names = NULL
),
column_types = col_types,
numeric_stats = numeric_stats,
factor_stats = factor_stats
)
class(result) <- "data_report"
return(result)
}
#' Print method for data_report objects
#' @export
print.data_report <- function(x, ...) {
cat("Comprehensive Data Report\n")
cat("=========================\n\n")
cat("Overview:\n")
cat("- Number of rows:", x$overview$n_rows, "\n")
cat("- Number of columns:", x$overview$n_cols, "\n")
cat("- Memory size:", x$overview$memory_size, "\n\n")
cat("Missing Values Summary:\n")
print(x$missing_values, row.names = FALSE)
cat("\n")
cat("Column Types:\n")
print(x$column_types)
cat("\n")
if (length(x$numeric_stats) > 0) {
cat("Numeric Columns Statistics:\n")
for (col in names(x$numeric_stats)) {
cat("-", col, ":\n")
cat("  Mean:", x$numeric_stats[[col]]$mean, "\n")
cat("  Median:", x$numeric_stats[[col]]$median, "\n")
cat("  SD:", x$numeric_stats[[col]]$sd, "\n")
cat("  Skewness:", x$numeric_stats[[col]]$skewness, "\n")
cat("  Kurtosis:", x$numeric_stats[[col]]$kurtosis, "\n\n")
}
}
invisible(x)
}
#' Plot distributions of data columns
#'
#' @param data A data frame
#' @param column Optional specific column name
#' @return ggplot2 visualizations
#' @export
#' @examples
#' plot_distributions(iris)
plot_distributions <- function(data, column = NULL) {
if (!is.data.frame(data)) {
stop("Input must be a data frame")
}
if (!is.null(column) && !column %in% names(data)) {
stop("Column not found in data")
}
# If specific column is requested
if (!is.null(column)) {
col_data <- data[[column]]
if (is.numeric(col_data)) {
p <- ggplot2::ggplot(data, ggplot2::aes_string(x = column)) +
ggplot2::geom_histogram(fill = "steelblue", color = "white", bins = 30) +
ggplot2::labs(title = paste("Distribution of", column)) +
ggplot2::theme_minimal()
return(p)
} else if (is.factor(col_data) || is.character(col_data)) {
p <- ggplot2::ggplot(data, ggplot2::aes_string(x = column)) +
ggplot2::geom_bar(fill = "steelblue") +
ggplot2::labs(title = paste("Distribution of", column)) +
ggplot2::theme_minimal() +
ggplot2::theme(axis.text.x = ggplot2::element_text(angle = 45, hjust = 1))
return(p)
}
}
# If no specific column, create a list of plots for all columns
plots <- list()
for (col in names(data)) {
col_data <- data[[col]]
if (is.numeric(col_data)) {
p <- ggplot2::ggplot(data, ggplot2::aes_string(x = col)) +
ggplot2::geom_histogram(fill = "steelblue", color = "white", bins = 30) +
ggplot2::labs(title = paste("Distribution of", col)) +
ggplot2::theme_minimal()
} else if (is.factor(col_data) || is.character(col_data)) {
p <- ggplot2::ggplot(data, ggplot2::aes_string(x = col)) +
ggplot2::geom_bar(fill = "steelblue") +
ggplot2::labs(title = paste("Distribution of", col)) +
ggplot2::theme_minimal() +
ggplot2::theme(axis.text.x = ggplot2::element_text(angle = 45, hjust = 1))
} else {
next  # Skip other data types
}
plots[[col]] <- p
}
# Return grid of plots if more than one
if (length(plots) > 1) {
do.call(gridExtra::grid.arrange, c(plots, ncol = 2))
} else if (length(plots) == 1) {
return(plots[[1]])
}
invisible(plots)
}
#' Suggest modeling approach based on data characteristics
#'
#' @param data_report Output from report_data function or a data frame
#' @return Text suggestions for modeling approach
#' @export
#' @examples
#' report <- report_data(iris)
#' suggest_approach(report)
suggest_approach <- function(data_report) {
# If a data frame is passed, generate report first
if (is.data.frame(data_report)) {
data_report <- report_data(data_report)
}
suggestions <- c()
# Check for missing values
high_missing <- data_report$missing_values$missing_percentage > 20
if (any(high_missing)) {
problematic_cols <- data_report$missing_values$column[high_missing]
suggestions <- c(suggestions,
paste0("High missing values (>20%) in columns: ",
paste(problematic_cols, collapse = ", "),
". Consider removing these columns or using advanced imputation methods."))
}
# Analyze numeric columns
if (length(data_report$numeric_stats) > 0) {
for (col in names(data_report$numeric_stats)) {
stats <- data_report$numeric_stats[[col]]
# Check for skewness
if (abs(stats$skewness) > 1) {
suggestions <- c(suggestions,
paste0("Column '", col, "' is highly skewed (skewness = ",
round(stats$skewness, 2),
"). Consider applying log transformation before modeling."))
}
# Check for outliers using kurtosis
if (abs(stats$kurtosis) > 3) {
suggestions <- c(suggestions,
paste0("Column '", col, "' has high kurtosis (",
round(stats$kurtosis, 2),
"), suggesting potential outliers. Consider robust statistical methods."))
}
}
}
# Analyze factor columns
if (length(data_report$factor_stats) > 0) {
for (col in names(data_report$factor_stats)) {
n_levels <- data_report$factor_stats[[col]]$n_levels
if (n_levels > 10) {
suggestions <- c(suggestions,
paste0("Column '", col, "' has many levels (", n_levels,
"). Consider grouping rare levels or using regularization techniques."))
}
}
}
# General suggestions based on data types
numeric_cols <- sum(sapply(data_report$column_types, function(x) any(x %in% c("numeric", "integer"))))
factor_cols <- sum(sapply(data_report$column_types, function(x) any(x %in% c("factor", "character"))))
if (numeric_cols > 0 && factor_cols == 0) {
suggestions <- c(suggestions,
"Your data contains only numeric variables. Linear models or tree-based methods could be appropriate.")
} else if (factor_cols > 0 && numeric_cols == 0) {
suggestions <- c(suggestions,
"Your data contains only categorical variables. Consider frequency-based models or encoding schemes.")
} else if (factor_cols > 0 && numeric_cols > 0) {
suggestions <- c(suggestions,
"Your data contains both numeric and categorical variables. Generalized linear models or tree-based methods could be appropriate.")
}
# If no specific issues found
if (length(suggestions) == 0) {
suggestions <- "No major data issues detected. Standard modeling approaches should work well."
}
# Format output
cat("Data Analysis Suggestions:\n")
cat("==========================\n\n")
for (i in seq_along(suggestions)) {
cat(i, ". ", suggestions[i], "\n\n", sep = "")
}
invisible(suggestions)
}
#' @format A data frame with 100 rows and 4 variables:
#' \describe{
#'   \item{normal_var}{A numeric variable with normal distribution}
#'   \item{skewed_var}{A numeric variable with right-skewed distribution}
#'   \item{category_var}{A factor variable with categories}
#'   \item{var_with_missing}{A numeric variable with missing values}
#' }
#' @examples
#' data(example_data)
#' report_data(example_data)
"example_data"
# Create the example dataset
set.seed(123)
example_data <- data.frame(
normal_var = rnorm(100, mean = 50, sd = 10),
skewed_var = rexp(100, rate = 0.5) + 30,
category_var = factor(sample(c("A", "B", "C"), 100, replace = TRUE,
prob = c(0.5, 0.3, 0.2))),
var_with_missing = c(rnorm(90, mean = 100, sd = 15), rep(NA, 10))
)
# Save the dataset
save(example_data, file = "data/example_data.rda")
# Install devtools if not already installed
if (!require(devtools)) {
install.packages("devtools")
}
# Install the package
devtools::install_github("yourusername/dataInspector")
# Install devtools if not already installed
if (!require(devtools)) {
install.packages("devtools")
}
# Install the package
devtools::install_github("zohrehkeykhaee2025/dataInspector")
# Install devtools if not already installed
if (!require(devtools)) {
install.packages("devtools")
}
# Install the package
devtools::install_github("ZohrehKeykhaee2025/dataInspector")
# Install devtools if not already installed
if (!require(devtools)) {
install.packages("devtools")
}
# Install the package
devtools::install_github("yourusername/dataInspector")
# Load the package
library(dataInspector)
# Install devtools if not already installed
if (!require(devtools)) {
install.packages("devtools")
}
# Install the package
devtools::install_github("ZohrehKeykhaee2025/dataInspector")
devtools::install_github("ZohrehKeykhaee2025/dataInspector")
devtools::install_github("ZohrehKeykhaee2025/dataInspector", ref = "main")
devtools::check()
devtools::install_local("path/to/dataInspector")
# مطمئن شوید این دستور را دقیقا اینگونه اجرا می‌کنید:
devtools::install_github("ZohrehKeykhaee2025/dataInspector", force = TRUE)
# مطمئن شوید این دستور را دقیقا اینگونه اجرا می‌کنید:
devtools::install_github("ZohrehKeykhaee2025/dataInspector", force = TRUE)
devtools::install_local("path/to/dataInspector")
devtools::install_github("ZohrehKeykhaee2025/dataInspector", ref = "main")
devtools::install_github("ZohrehKeykhaee2025/dataInspector")
devtools::install_github()
install.packages("devtools")
install.packages(c("devtools", "usethis", "roxygen2", "testthat", "knitr", "ggplot2", "moments", "dplyr"))
install.packages(c("devtools", "usethis", "roxygen2", "testthat", "knitr", "ggplot2", "moments", "dplyr"))
devtools::install_github("ZohrehKeykhaee2025/dataInspector")
devtools::install_github("ZohrehKeykhaee2025/dataInspector")
# نصب از روی دیسک محلی
devtools::install_local("~/path/to/your/dataInspector")
# سپس تست کنید
library(dataInspector)
data(example_data)
report_data(example_data)
# نصب پکیج از مسیر محلی
devtools::install_local("C:/Users/Zhivarr/OneDrive/Documents/GitHub/dataInspector")
devtools::install_local("C:\\Users\\Zhivarr\\OneDrive\\Documents\\GitHub\\dataInspector")
library(dataInspector)
# بررسی وجود پوشه
dir.exists("C:/Users/Zhivarr/OneDrive/Documents/GitHub/dataInspector")
# بررسی محتویات پوشه
list.files("C:/Users/Zhivarr/OneDrive/Documents/GitHub/dataInspector", full.names = TRUE)
# کپی پکیج به یک مسیر محلی (مثلاً دسکتاپ)
file.copy("C:/Users/Zhivarr/OneDrive/Documents/GitHub/dataInspector",
"C:/Users/Zhivarr/Desktop/dataInspector",
recursive = TRUE)
# نصب از مسیر جدید
devtools::install_local("C:/Users/Zhivarr/Desktop/dataInspector")
# ایجاد ساختار پکیج (اگر وجود ندارد)
devtools::create("C:/Users/Zhivarr/Desktop/dataInspector")
# ایجاد ساختار پکیج (اگر وجود ندارد)
devtools::create("C:/Users/Zhivarr/OneDrive/Documents/GitHub/dataInspector")
# سپس فایل‌های خود را به این پوشه کپی کنید
devtools::install_github("ZohrehKeykhaee2025/dataInspector")
# بررسی وجود پوشه
dir.exists("C:/Users/Zhivarr/OneDrive/Documents/GitHub/dataInspector")
# بررسی محتویات پوشه
list.files("C:/Users/Zhivarr/OneDrive/Documents/GitHub/dataInspector", full.names = TRUE)
# کپی پکیج به یک مسیر محلی (مثلاً دسکتاپ)
file.copy("C:/Users/Zhivarr/OneDrive/Documents/GitHub/dataInspector",
"C:/Users/Zhivarr/OneDrive/Documents/GitHub/dataInspector",
recursive = TRUE)
devtools::install_local("C:/Users/Zhivarr/OneDrive/Documents/GitHub/dataInspector")
# ایجاد ساختار پکیج (اگر وجود ندارد)
devtools::create("C:/Users/Zhivarr/OneDrive/Documents/GitHub/dataInspector")
# سپس فایل‌های خود را به این پوشه کپی کنید
devtools::install_github("ZohrehKeykhaee2025/dataInspector")
list.files("C:/Users/Zhivarr/OneDrive/Documents/GitHub/dataInspector", recursive = TRUE)
devtools::install_github("ZohrehKeykhaee2025/dataInspector")
devtools::install_github("ZohrehKeykhaee2025/dataInspector", ref = "main")
devtools::install_github("ZohrehKeykhaee2025/dataInspector")
# بارگذاری پکیج
library(dataInspector)
# تست داده مثال
data(example_data)
library(dataInspector)
data(example_data)
# ایجاد پوشه data اگر وجود ندارد
if (!dir.exists("data")) {
dir.create("data")
}
# اجرای فایل example_data.R برای ایجاد و ذخیره dataset
source("data/example_data.R")
# ذخیره dataset با فرمت rda
save(example_data, file = "data/example_data.rda", compress = "xz")
data(example_data)
setwd("C:/Users/Zhivarr/OneDrive/Documents/GitHub/dataInspector")
# کدهای ایجاد dataset را اجرا کنید
source("data/example_data.R")
file.exists("data/example_data.rda")
devtools::install_local("C:/Users/Zhivarr/OneDrive/Documents/GitHub/dataInspector")
library(dataInspector)
data(example_data)
# در فایل R یکی از توابع، داده را مستقیماً تعریف کنید
example_data <- function() {
set.seed(123)
data.frame(
normal_var = rnorm(100, mean = 50, sd = 10),
skewed_var = rexp(100, rate = 0.5) + 30,
category_var = factor(sample(c("A", "B", "C"), 100, replace = TRUE,
prob = c(0.5, 0.3, 0.2))),
var_with_missing = c(rnorm(90, mean = 100, sd = 15), rep(NA, 10))
)
}
library(dataInspector)
data(example_data)
# Detach the package if it is loaded
detach("package:dataInspector", unload = TRUE)
# Set the working directory to the package root
setwd("C:/Users/Zhivarr/OneDrive/Documents/GitHub/dataInspector")
# Create the dataset
set.seed(123)
example_data <- data.frame(
normal_var = rnorm(100, mean = 50, sd = 10),
skewed_var = rexp(100, rate = 0.5) + 30,
category_var = factor(sample(c("A", "B", "C"), 100, replace = TRUE,
prob = c(0.5, 0.3, 0.2))),
var_with_missing = c(rnorm(90, mean = 100, sd = 15), rep(NA, 10))
)
# Use devtools to save the dataset
devtools::use_data(example_data, overwrite = TRUE)
# حذف پکیج از حافظه
detach("package:dataInspector", unload = TRUE)
# ابتدا مطمئن شویم usethis نصب شده است
if (!require(usethis)) install.packages("usethis")
# حالا dataset را ذخیره کنیم
setwd("C:/Users/Zhivarr/OneDrive/Documents/GitHub/dataInspector")
# ایجاد dataset
set.seed(123)
example_data <- data.frame(
normal_var = rnorm(100, mean = 50, sd = 10),
skewed_var = rexp(100, rate = 0.5) + 30,
category_var = factor(sample(c("A", "B", "C"), 100, replace = TRUE,
prob = c(0.5, 0.3, 0.2))),
var_with_missing = c(rnorm(90, mean = 100, sd = 15), rep(NA, 10))
)
# ذخیره dataset با استفاده از usethis
usethis::use_data(example_data, overwrite = TRUE)
# ابتدا مطمئن شویم usethis نصب شده است
if (!require(usethis)) install.packages("usethis")
# حالا dataset را ذخیره کنیم
setwd("C:/Users/Zhivarr/OneDrive/Documents/GitHub/dataInspector")
# ایجاد dataset
set.seed(123)
example_data <- data.frame(
normal_var = rnorm(100, mean = 50, sd = 10),
skewed_var = rexp(100, rate = 0.5) + 30,
category_var = factor(sample(c("A", "B", "C"), 100, replace = TRUE,
prob = c(0.5, 0.3, 0.2))),
var_with_missing = c(rnorm(90, mean = 100, sd = 15), rep(NA, 10))
)
# ذخیره dataset با استفاده از usethis
usethis::use_data(example_data, overwrite = TRUE)
# ذخیره dataset به صورت مستقیم
save(example_data, file = "data/example_data.rda", compress = "xz")
# اطمینان از ایجاد فایل
if (file.exists("data/example_data.rda")) {
message("فایل dataset با موفقیت ایجاد شد")
} else {
message("مشکل در ایجاد فایل dataset")
}
devtools::install_local("C:/Users/Zhivarr/OneDrive/Documents/GitHub/dataInspector")
library(dataInspector)
# دو روش برای دسترسی به dataset:
# 1. مستقیماً با نام آن
head(example_data)
# 2. با تابع data()
data(example_data)
# ایجاد پوشه data اگر وجود ندارد
if (!dir.exists("data")) {
dir.create("data")
}
# سپس دوباره dataset را ذخیره کنید
save(example_data, file = "data/example_data.rda", compress = "xz")
devtools::install_local("C:/Users/Zhivarr/OneDrive/Documents/GitHub/dataInspector")
tools::checkRdaFiles("data/example_data.rda")
# حذف پکیج از حافظه
try(detach("package:dataInspector", unload = TRUE), silent = TRUE)
# حذف پکیج از سیستم
try(remove.packages("dataInspector"), silent = TRUE)
# حذف آبجکت‌های conflicted از محیط global
rm(list = ls())
devtools::install_local("C:/Users/Zhivarr/OneDrive/Documents/GitHub/dataInspector")
library(dataInspector)
setwd("C:/Users/Zhivarr/OneDrive/Documents/GitHub/dataInspector")
# ایجاد dataset جدید
set.seed(123)
example_data <- data.frame(
normal_var = rnorm(100, mean = 50, sd = 10),
skewed_var = rexp(100, rate = 0.5) + 30,
category_var = factor(sample(c("A", "B", "C"), 100, replace = TRUE,
prob = c(0.5, 0.3, 0.2))),
var_with_missing = c(rnorm(90, mean = 100, sd = 15), rep(NA, 10))
)
# ذخیره dataset
save(example_data, file = "data/example_data.rda", compress = "xz")
# نصب مجدد
devtools::install_local("C:/Users/Zhivarr/OneDrive/Documents/GitHub/dataInspector")
#' @export
example_data <- example_data  # یا مستقیماً اینجا dataset را تعریف کنید
# حذف پکیج از حافظه و سیستم
try(detach("package:dataInspector", unload = TRUE), silent = TRUE)
try(remove.packages("dataInspector"), silent = TRUE)
# حذف فایل‌های موقت
rm(list = ls())
# حذف پکیج از حافظه و سیستم
try(detach("package:dataInspector", unload = TRUE), silent = TRUE)
try(remove.packages("dataInspector"), silent = TRUE)
# حذف فایل‌های موقت
rm(list = ls())
# حذف پکیج از حافظه و سیستم
try(detach("package:dataInspector", unload = TRUE), silent = TRUE)
try(remove.packages("dataInspector"), silent = TRUE)
# حذف فایل‌های موقت
rm(list = ls())
